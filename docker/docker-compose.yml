services:
  app:
    build: . # 프로젝트 루트에 Dockerfile이 있다고 가정
    container_name: concertmania-app
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=local
      - SPRING_DATASOURCE_URL=jdbc:mysql://concertmania-mysql:3306/concertmania?useSSL=false&allowPublicKeyRetrieval=true
      - SPRING_DATASOURCE_USERNAME=concertuser
      - SPRING_DATASOURCE_PASSWORD=concertpass
      - SPRING_DATA_REDIS_HOST=concertmania-redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=concertmania-kafka:9092
      # ELK APM 설정
      - ELASTIC_APM_SERVER_URLS=http://apm-server:8200
      - ELASTIC_APM_SERVICE_NAME=concertmania-app
      - ELASTIC_APM_ENVIRONMENT=local
    networks:
      - concert-network
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      apm-server:
        condition: service_started

  mysql:
    image: mysql:8.0
    container_name: concertmania-mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: concertmania
      MYSQL_USER: concertuser
      MYSQL_PASSWORD: concertpass
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./docker/mysql-init/:/docker-entrypoint-initdb.d/
    networks:
      - concert-network
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5


# 환경별 노드 분리 할까 했으나 일단 유지.
  kafka:
    image: bitnami/kafka:3.7
    container_name: concertmania-kafka
    environment:
      - KAFKA_CFG_KRAFT_MODE=true
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@concertmania-kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093
#      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://concertmania-kafka:9092,EXTERNAL://localhost:29092
#      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
#      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      #      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://concertmania-kafka:9092,OUTSIDE://localhost:9092
#      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,OUTSIDE:PLAINTEXT
#      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,OUTSIDE://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "29092:29092"
    volumes:
      - kafka-data:/bitnami/kafka
    networks:
      - concert-network
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
  
  redis:
    image: redis:7.0
    container_name: concertmania-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - concert-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.18.2
    container_name: concertmania-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - es-data:/usr/share/elasticsearch/data
    networks:
      - concert-network
    healthcheck:
      test: CMD-SHELL curl -f http://127.0.0.1:9200 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  logstash:
    image: docker.elastic.co/logstash/logstash:8.18.2
    container_name: concertmania-logstash
    ports:
      - "5044:5044"         # beats input (Filebeat 용)
      - "5001:5000"         # TCP input (직접 전송 시)
      - "9600:9600"         # HTTP monitoring
    volumes:
      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline
    networks:
      - concert-network
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:8.18.2
    container_name: concertmania-kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - concert-network
    healthcheck:
      test: CMD-SHELL curl -f http://localhost:5601 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  apm-server:
    image: docker.elastic.co/apm/apm-server:8.18.2
    container_name: concertmania-apm
    ports:
      - "8200:8200"
    depends_on:
      - elasticsearch
      - kibana
    networks:
      - concert-network
    environment:
      - output.elasticsearch.hosts=["http://elasticsearch:9200"]
      - apm-server.kibana.enabled=true
      - apm-server.kibana.host=http://kibana:5601

networks:
  concert-network:
    driver: bridge

volumes:
  kafka-data:
  mysql-data:
  redis-data:
  es-data:
